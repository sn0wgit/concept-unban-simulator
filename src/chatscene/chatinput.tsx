import './chatinput.css'
import { ChatMessagesContext } from './ChatMessagesContext'
import { useContext } from 'react'
import ChatMessage from './chatmessage'

function ChatInput(){
    const inheritedNewMessages = useContext(ChatMessagesContext)
    const setMessageList = inheritedNewMessages.setMessageList
    const messageList = inheritedNewMessages.messageList

    function handleInputButtonClick(){

        const inputField = document.querySelector<HTMLInputElement>("input.ChatComponent-inputField");

        if (inputField!.value != ""){
            const replies = {
                "–ø–æ—á–µ–º—É": "–ø–æ—Ç–æ–º—É —á—Ç–æ",
                "–ø—Ä–∏—á–∏–Ω–∞": "–ø–æ—Ç–æ–º—É —á—Ç–æ",
                "–ø–æ–∫–∞–∂–∏": 'üå∞<iframe width="853" height="480" src="https://www.youtube.com/embed/oMCu0vfNVao" title="Tanki Online, Easter Egg?" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>',
                "–æ—Ä–µ—Ö": 'üå∞<iframe width="853" height="480" src="https://www.youtube.com/embed/oMCu0vfNVao" title="Tanki Online, Easter Egg?" frameborder="0" allow="accelerometer; clipboard-write; encrypted-media; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin"></iframe>',
                "—è –Ω–µ –≤–∏–Ω–æ–≤–µ–Ω": "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ–≤–µ–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ –µ—ë –∏—Ç–æ–≥–∞–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤. –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.",
                "unban": "–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –ø—Ä–æ–≤–µ–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É. –ü–æ –µ—ë –∏—Ç–æ–≥–∞–º –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤. –ü—Ä–æ—Å–∏–º –ø—Ä–æ—â–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞."
            }

            setMessageList(
                messageList.concat(
                    <ChatMessage
                        key={messageList.length+1}
                        author="user"
                        message={
                            inputField!.value
                        }
                    />
                )
            )
            const userInputedQuestion = <ChatMessage
                key={messageList.length+1}
                author="user"
                message={
                    inputField!.value
                }
            />

            let moderatorGeneratedAnswer = <ChatMessage key={messageList.length+2} author="moderator" message="–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø–æ–Ω—è—Ç. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." />;

            const regex = new RegExp(Object.keys(replies).join("|"), "gi");
            if (inputField!.value.match(regex)){
                for (const [key, value] of Object.entries(replies)){
                    if (inputField!.value.toLowerCase().includes(key)){
                        moderatorGeneratedAnswer = <ChatMessage key={messageList.length+2} author="moderator" message={value} />
                    }
                }
            }
            
            setMessageList(
                messageList.concat(
                    userInputedQuestion,
                    moderatorGeneratedAnswer
                )
            )
            
            inputField!.classList.add("ChatComponent-inputFieldAwait")

            if (moderatorGeneratedAnswer?.props["message"].match(/–ú—ã/g)){
                setTimeout(() => {
                    location.reload();
                }, 10000)
            } else {
                setTimeout(() => {
                    inputField!.setAttribute("class", "ChatComponent-inputField");
                }, 3000);
            }
        }
        inputField!.value = ""
    }
    return(
        <div className="ChatComponent-input">
            <img src="/public/user.png" className='ChatComponent-inputProflePicture'/>
            <input type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç" className="ChatComponent-inputField" />
            <button className="ChatComponent-sendButton" onClick={handleInputButtonClick}></button>
        </div>
    )
}

export default ChatInput